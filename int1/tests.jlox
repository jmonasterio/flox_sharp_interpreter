 print "TEST #0";
 { print clock(); }

 print "TEST #1";
 { var x; x=2; print x; }


 print "TEST #3"; {
 var a=1; { var b=2; print a; print b; b=b+1; { b=b+1; print a; print b;}}
 }
 
 print "TEST #4"; {
 var a=1; fun f(){  print a; var a=2; print a; } f();
 }

print "TEST #5"; {
 fun f(a,b) { print a+b;} if (f(1,2) == 3) {print "PASS";} else {print "FAIL";}
 }
 
 print "TEST #6"; {
 var a = 0; while( a <= 0) { print a; a=1; print a;}
 }


  print "TEST #7"; {
    // FIB: 
	var a = 0; var b = 1; while (a < 10000) {   print a;  var temp = a;  a = b;  b = temp + b;}
	}

	 print "TEST #2";
 { var a = "global"; {   fun showA() {     print a;  }   showA();   var a = "block";   showA(); } }



 // Recursion
print "TEST #8"; {
    // Recursive count: 
	fun count(n) { if(n>0) count(n-1); print n;} count(3);
	}

	

print "TEST #9"; {

fun makeCounter() {   var i = 0;   fun count() {     i = i + 1;     print i;   }   return count; } var counter = makeCounter(); counter(); counter(); // "1" then "2".
}

print "TEST #10"; {
	for( var i=0; i<10; i=i+1;) { print i;}
}


print "TEST#11";
class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream; // Prints "DevonshireCream".


print "TEST#12";
class Bagel {}
var bagel = Bagel();
print bagel; // Prints "Bagel instance".

print "TEST#13";
class Breakfast {
  cook() {
    print "Eggs a-fryin'!";
  }

  serve(who) {
    print "Enjoy your breakfast, " + who + ".";
  }
}

print "TEST #14";
var bk = Breakfast();
bk.test = 1;
print bk.test;
bk.test = 2;
print bk.test;

print "TEST #15";
var object = Breakfast();
var m = object.cook;
m();

print "TEST#16";
class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

Bacon().eat(); // Prints "Crunch crunch crunch!".

print "TEST#17";
class Thing {
  getCallback() {
    fun localFunction() {
      print this;
    }

    return localFunction;
  }
}

var callback = Thing().getCallback();
callback();

print "TEST #18";
//print this;
//fun notAMethod() {
//  print this;
//}
//return 0;

print "TEST #19";
class Foo {
  init() {
    print this;
  }
}

var foo = Foo();
print foo.init();

//print "TEST #20";
//class Foop {
//  init() {
//    return "something else";
//  }
//}
//
//var foo = Foop();
//print foo.init();

